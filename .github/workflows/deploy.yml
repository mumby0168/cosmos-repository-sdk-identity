name: Deploy Cosmos App to ACA

on:
  push:
    branches:
      - deploy

env:
  RESOURCE_GROUP_NAME: cosmos-repository-sdk-identity
  SP_ID: 8b67a14f-09d7-4d8c-b8e8-5fec2b4bec07

  REGION:	westeurope

  DOCKER_FILE_PATH: src/CosmosRepositorySdkManagedIdentityApi/Dockerfile
  IMAGE_NAME: apps/books-api

jobs:
  core-infra:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout to the branch
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AzureSPN }}

      - name: Create resource group
        uses: azure/CLI@v1
        with:
          inlineScript: >
            echo "Creating resource group in Azure"
            echo "Executing 'az group create -l ${{ env.REGION }} -n ${{ env.RESOURCE_GROUP_NAME }}'"

            az group create -l ${{ env.REGION }} -n ${{ env.RESOURCE_GROUP_NAME }}

      - name: Creating resources
        uses: azure/CLI@v1
        with:
          inlineScript: >
            echo "Creating resources"
            
            az deployment group create --resource-group ${{ env.RESOURCE_GROUP_NAME }} --template-file './bicep/main.bicep'

  build:
    runs-on: ubuntu-latest
    needs: core-infra

    steps:
      - name: Checkout to the branch
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AzureSPN }}

      - name: Get ACR Login Server
        run: |
          # Retrieve ACR Login Server value from deployment output
          ACR_LOGIN_SERVER=$(az deployment group show -g ${{ env.RESOURCE_GROUP_NAME }} -n main --query properties.outputs.acrLoginServer.value | tr -d '"')
          echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to ACR
        run: |
          set -euo pipefail
          # see https://cloudarchitected.com/2021/09/logging-into-acr-in-github-actions/
          # see https://github.com/Azure/acr/blob/main/docs/AAD-OAuth.md#calling-post-oauth2exchange-to-get-an-acr-refresh-token
          access_token=$(az account get-access-token --query accessToken -o tsv)
          refresh_token=$(curl https://${{ env.ACR_LOGIN_SERVER }}/oauth2/exchange -v -d "grant_type=access_token&service=${{ env.ACR_LOGIN_SERVER }}&access_token=$access_token" | jq -r .refresh_token)
          # The null GUID 0000... tells the container registry that this is an ACR refresh token during the login flow
          docker login -u 00000000-0000-0000-0000-000000000000 --password-stdin ${{ env.ACR_LOGIN_SERVER }} <<< "$refresh_token"

      - name: Build and push app
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ env.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          file: ${{ env.DOCKER_FILE_PATH }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout to the branch
        uses: actions/checkout@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AzureSPN }}
      
      - name: Get ACR Login Server
        run: |
          # Retrieve ACR Login Server value from deployment output
          ACR_LOGIN_SERVER=$(az deployment group show -g ${{ env.RESOURCE_GROUP_NAME }} -n main --query properties.outputs.acrLoginServer.value | tr -d '"')
          echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER" >> $GITHUB_ENV

      - name: Deploy API
        uses: azure/CLI@v1
        with:
          inlineScript: >
            echo "Deploying API"

            az deployment group create --resource-group ${{ env.RESOURCE_GROUP_NAME }} --template-file './bicep/app.bicep' --parameters imageTag='${{github.sha}}' serviceName='${{ env.IMAGE_NAME }}'

      - name: logout
        run: >
          az logout
